pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('aws_account_id')
        NVD_API_KEY = credentials('nvd_api')
        AWS_ECR_REPO_NAME_1 = credentials('ecr_repo_1')
        AWS_ECR_REPO_NAME_2 = credentials('ecr_repo_2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {

        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                // git credentialsId: 'GITHUB', url: 'https://github.com/AmanPathak-DevOps/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
                git url: 'https://github.com/aatikah/terraform-eks-argocd.git', branch: 'main'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=mern \
                        -Dsonar.projectKey=mern '''
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }

        // stage('OWASP Dependency-Check Scan') {
        //     steps {
        //         dir('app') {
                    
        //             dependencyCheck additionalArguments: '--scan ./ --nvdApiKey=$NVD_API_KEY --disableYarnAudit --disableNodeAudit', odcInstallation: 'owasp-check' 
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }

        stage('Trivy File Scan') {
            steps {
                dir('app') {
                    sh 'trivy fs . > trivyfs.txt 2>&1'
                    archiveArtifacts artifacts: 'trivyfs.txt', onlyIfSuccessful: true
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('app') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker-compose build'
                    }
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                script {
                    //sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}' 
                    sh "aws ecr get-login-password --region ${env.AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${env.REPOSITORY_URI}"

                    def services = [env.AWS_ECR_REPO_NAME_1, env.AWS_ECR_REPO_NAME_2] // services you built

                    services.each { service ->
                        def imageTag = "${env.REPOSITORY_URI}${service}:${env.BUILD_NUMBER}"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                script {
                    def services = [AWS_ECR_REPO_NAME_1, AWS_ECR_REPO_NAME_2] // The services you want to scan

                    services.each { service ->
                        sh "trivy image ${REPOSITORY_URI}${service}:${BUILD_NUMBER} > trivy_${service}_image.txt"
                    }
                }
            }
        }



    }
}